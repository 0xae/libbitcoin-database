Step 1 creates two files called values.seqdb and keys.seqdb.
Step 2 then iterates through values.seqdb, recreating the corresponding key
and adding it to the database.
Step 3 iterates keys.seqdb, fetching the values from the database.
./null_read simulates iterating the file without any fetching a database.

With the large database sizes Bitcoin with millions of keys (30 million txs),
we cannot store the dataset in memory. To compensate, null_read allows us
to see the magnitude of performance impact on our final calculations.

1. First prepare the test.

  $ ./prepare 
  Usage: prepare TOTAL_TXS
  $ ./prepare 20000
  Done.

2. Create the LevelDB and htdb_slab databases.

  $ ./leveldb_write 
  Wrote 20000 values. Done.
  
  $ ./htdb_slab_write 
  Usage: htdb_slab_write BUCKETS
  $ ./htdb_slab_write 20000
  Buckets: 20000
  Wrote 20000 values. Done.

3. Run the comparison tests. Remember to drop the cache before each test.

  $ ./leveldb_read 
  Usage: leveldb_read ITERATIONS
  
  $ sudo ../drop_caches.sh 
  $ ./leveldb_read 400000
  DEBUG [leveldb.Get()]: iterations = 400000 |   2191.961003
  
  $ ./htdb_slab_read 
  Usage: htdb_slab_read ITERATIONS
  
  $ sudo ../drop_caches.sh 
  $ ./htdb_slab_read 400000
  DEBUG [ht.get()]: iterations = 400000 buckets = 20000 |   782.870643
  
  $ sudo ../drop_caches.sh 
  $ ./null_read 
  Usage: null_read ITERATIONS
  $ ./null_read 400000
  DEBUG [None]: iterations = 400000 |   197.432649

